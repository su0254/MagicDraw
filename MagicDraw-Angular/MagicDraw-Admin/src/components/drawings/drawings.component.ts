import { Component, OnInit, ViewChild } from "@angular/core"
import { MatTableDataSource } from "@angular/material/table"
import { MatPaginator } from "@angular/material/paginator"
import { MatSort } from "@angular/material/sort"
import { MatDialog } from "@angular/material/dialog"
import { MatSnackBar } from "@angular/material/snack-bar"
import { MatIcon } from "@angular/material/icon"
import { MatCard, MatCardContent } from "@angular/material/card"
import { MatCardTitle}from "@angular/material/card"
import { MatCardActions} from "@angular/material/card"
import { MatCardSubtitle, MatCardHeader } from "@angular/material/card"
import { Observable } from "rxjs"
import { AsyncPipe } from '@angular/common';
import { DrawingDialogComponent } from "./drawing-dialog/drawing-dialog/drawing-dialog.component"
import { ConfirmDialogComponent } from "../../shareds/confirm-dialog/confirm-dialog/confirm-dialog.component"
import { DrawingService } from "../../services/drawingService/drawing.service"
import { Drawing } from "../../Models/Drawing"

@Component({
  selector: 'app-drawings',
  imports: [MatIcon, MatCard, MatCardTitle,
    MatCardActions, MatCardSubtitle, MatCardHeader, AsyncPipe, MatCardContent],
  templateUrl: './drawings.component.html',
  styleUrl: './drawings.component.css'
})
export class DrawingsComponent {
  drawings$: Observable<Drawing[]> | undefined;

  constructor(
    private dialog: MatDialog,
    private snackBar: MatSnackBar,
    private drawingService: DrawingService
  ) {}

  ngOnInit() {
    this.drawingService.getAllDrawings().subscribe(() => {
      this.drawings$ = this.drawingService.drawings$;
    });
  }

  addDrawing() {
    const dialogRef = this.dialog.open(DrawingDialogComponent, {
      width: "500px",
      data: { title: "Add Drawing", drawing: {} },
    });

    dialogRef.afterClosed().subscribe((result) => {
      if (result) {
        const newDrawing :Drawing= {
          id: "", // ID will be generated by the server
          descraption: result.description, // Added description property
          categoryName: result.category, // Added category property
          url: result.imageUrl, // Added imageUrl property
          userId: result.userId,
          image: result.image, // Added image property
          fileName: result.fileName, // Added fileName property
        };

        this.drawingService.addDrawing(newDrawing).subscribe(() => {
          this.snackBar.open("Drawing added successfully!", "Close", {
            duration: 3000,
            horizontalPosition: "center",
            verticalPosition: "top",
          });
        });
      }
    });
  }

  editDrawing(drawing: Drawing) {
    const dialogRef = this.dialog.open(DrawingDialogComponent, {
      width: "500px",
      data: { title: "Edit Drawing", drawing: { ...drawing } },
    });

    dialogRef.afterClosed().subscribe((result) => {
      if (result) {
        this.drawingService.updateDrawing(drawing.id, result).subscribe(() => {
          this.snackBar.open("Drawing updated successfully!", "Close", {
            duration: 3000,
            horizontalPosition: "center",
            verticalPosition: "top",
          });
        });
      }
    });
  }

  deleteDrawing(drawing: Drawing) {
    const dialogRef = this.dialog.open(ConfirmDialogComponent, {
      width: "400px",
      data: {
        title: "Delete Drawing",
        message: `Are you sure you want to delete the drawing "${drawing.fileName}"?`,
        confirmText: "Delete",
        cancelText: "Cancel",
      },
    });

    dialogRef.afterClosed().subscribe((result) => {
      if (result) {
        this.drawingService.deleteDrawing(drawing.id).subscribe(() => {
          this.snackBar.open("Drawing deleted successfully!", "Close", {
            duration: 3000,
            horizontalPosition: "center",
            verticalPosition: "top",
          });
        });
      }
    });
  }
}
