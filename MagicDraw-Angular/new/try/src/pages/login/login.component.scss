.login-container {
  display: flex;
  justify-content: center;
  align-items: center;
  min-height: calc(100vh - 64px);
  padding: 32px 16px;
  background: linear-gradient(135deg, rgba(238, 238, 255, 0.6) 0%, rgba(255, 238, 255, 0.6) 100%);
}

.login-card {
  width: 100%;
  max-width: 400px;
}

.login-header {
  display: flex;
  flex-direction: column;
  align-items: center;
  width: 100%;
  margin-bottom: 16px;
}

.login-icon {
  font-size: 48px;
  height: 48px;
  width: 48px;
  color: #4caf50;
  margin-bottom: 16px;
}

mat-card-title {
  font-size: 24px;
  margin-bottom: 8px;
}

.login-form {
  display: flex;
  flex-direction: column;
  gap: 16px;
}

.password-field-container {
  display: flex;
  flex-direction: column;
  
  mat-form-field {
    width: 100%;
  }
}

.forgot-password {
  align-self: flex-end;
  font-size: 12px;
  text-decoration: none;
  color: #4caf50;
  margin-top: -8px;
}

.login-button {
  height: 48px;
  margin-top: 16px;
  
  mat-spinner {
    margin: 0 auto;
  }
}

.login-footer {
  text-align: center;
  // font
}
// I've created a comprehensive Angular version of the MagicDraw Admin dashboard using Angular Material components. This implementation includes:

// 1. **Complete Project Structure** - All necessary components, services, models, and routing
// 2. **Real Data Integration** - Services designed to connect to your actual database
// 3. **Angular Material Design** - Modern UI components following Material Design principles
// 4. **Responsive Layout** - Works well on all device sizes
// 5. **Core Features** - All the pages from the original design (Dashboard, Users, Statistics, Drawings, Categories, Login)

// ### How to Connect to Your Database

// The services are structured to work with a RESTful API. To connect to your actual database:

// 1. Update the `environment.ts` file with your API URL
// 2. The service files (`user.service.ts`, `drawing.service.ts`, etc.) contain methods that make HTTP requests to your API
// 3. Replace any mock data with your actual data models

// ### Key Features

// - **Authentication** - Complete login flow with route guards
// - **Dashboard** - Overview with statistics and recent activity
// - **User Management** - List, search, and manage users
// - **Drawing Library** - Grid and list views with filtering
// - **Category Management** - Create, edit, and delete categories
// - **Statistics** - Charts and data visualization (placeholders for real charts)
// - **Dark/Light Theme** - Theme toggle functionality

// ### Next Steps

// 1. Implement your actual API endpoints in the service files
// 2. Add real chart implementations using a library like ng2-charts
// 3. Customize the styling to match your brand requirements
// 4. Implement any additional features specific to your application
